//Create a collection named orders.

db.createCollection('orders');

//Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.


orders.insert({ orderDate: "<2016-11-26>", orderTotal: "900.00",  lineItems: [
    {price: 3.50,
    quantity: 25,
    productName: 'Loch Ness Monster'},
    {price: 35,
    quantity: 55,
    productName: 'Bane Mask'},
    {price: 5,
    quantity: 1000,
    productName: 'Memes'},
  ]});
orders.insert({ orderDate: "<2016-02-29>", orderTotal: "3.50",  lineItems: [
    {price: 3.50,
    quantity: 25,
    productName: 'Loch Ness Monster'},
    {price: 35,
    quantity: 55,
    productName: 'Bane Mask'},
    {price: 5,
    quantity: 1000,
    productName: 'Memes'},
  ]});
orders.insert({ orderDate: "<2015-10-21>", orderTotal: "1.00",  lineItems: [
    {price: 3.50,
    quantity: 25,
    productName: 'Loch Ness Monster'},
    {price: 35,
    quantity: 55,
    productName: 'Bane Mask'},
    {price: 5,
    quantity: 1000,
    productName: 'Memes'},
  ]});

//Find a single order document, any order document.

orders.find({orderTotal = 3.50})

//Find all orders and make them look pretty.

orders.find({orderTotal = 3.50)}.pretty()

//Find all orders with an orderDate that is prior to 1/1/2016.

orders.find({orderDate: {$lt: new Date('2016-1-1')}})

//Find all orders with an orderDate that is after 1/1/2016.

orders.find({orderDate: {$gt: new Date('2016-1-1')}})

//Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.

db.orders.find({"lineItems.quantity": {$lt: 50}, "lineItems.quantity": {$gt: 5}})
or
db.orders.find({$and : [{"lineItems.quantity": {$lt: 50}, "lineItems.quantity": {$gt: 5}}]})

//Update one of your line items to 42.99. HINT: Look at dot notation

db.orders.update({productName: "Bane Mask"}, {set: {"lineItems.0.price": 42.99} })

//Remove one of your orders.

db.orders.remove({"_id" : productName("Memes")}) Memes
